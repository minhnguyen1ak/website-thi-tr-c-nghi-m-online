import React, { useState, useEffect } from 'react'; // Nh·∫≠p React v√† c√°c hook useState, useEffect t·ª´ th∆∞ vi·ªán 'react'
import { useNavigate } from 'react-router-dom'; // Nh·∫≠p useNavigate ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
import '../css/form.css'; // Nh·∫≠p t·ªáp CSS ƒë·ªÉ ƒë·ªãnh d·∫°ng giao di·ªán bi·ªÉu m·∫´u

// Khai b√°o component EditRoom, nh·∫≠n props: exams (danh s√°ch ƒë·ªÅ thi), onBack (quay l·∫°i), onSave (l∆∞u d·ªØ li·ªáu), roomData (d·ªØ li·ªáu ph√≤ng thi)
const EditRoom = ({ exams = [], onBack, onSave, roomData }) => {
    // Kh·ªüi t·∫°o tr·∫°ng th√°i form v·ªõi useState ƒë·ªÉ l∆∞u th√¥ng tin ph√≤ng thi (t√™n, m√£ ph√≤ng, m√£ ƒë·ªÅ thi)
    const [form, setForm] = useState({
        roomName: '',
        roomCode: '',
        examCode: ''
    });

    // Kh·ªüi t·∫°o useNavigate ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng
    const navigate = useNavigate();

    // S·ª≠ d·ª•ng useEffect ƒë·ªÉ c·∫≠p nh·∫≠t form khi roomData thay ƒë·ªïi
    useEffect(() => {
        // N·∫øu roomData t·ªìn t·∫°i, c·∫≠p nh·∫≠t tr·∫°ng th√°i form v·ªõi d·ªØ li·ªáu t·ª´ roomData
        if (roomData) {
            setForm({
                roomName: roomData.roomName || '', // G√°n t√™n ph√≤ng, m·∫∑c ƒë·ªãnh r·ªóng n·∫øu kh√¥ng c√≥
                roomCode: roomData.roomCode || '', // G√°n m√£ ph√≤ng, m·∫∑c ƒë·ªãnh r·ªóng n·∫øu kh√¥ng c√≥
                examCode: roomData.examCode || ''  // G√°n m√£ ƒë·ªÅ thi, m·∫∑c ƒë·ªãnh r·ªóng n·∫øu kh√¥ng c√≥
            });
        }
    }, [roomData]); // Ch·ªâ ch·∫°y khi roomData thay ƒë·ªïi

    // N·∫øu roomData ch∆∞a c√≥, hi·ªÉn th·ªã th√¥ng b√°o ƒëang t·∫£i
    if (!roomData) {
        return <div>ƒêang t·∫£i d·ªØ li·ªáu ph√≤ng thi...</div>;
    }

    // H√†m x·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi gi√° tr·ªã trong c√°c tr∆∞·ªùng nh·∫≠p li·ªáu
    const handleChange = (e) => {
        const { name, value } = e.target; // L·∫•y t√™n tr∆∞·ªùng v√† gi√° tr·ªã t·ª´ s·ª± ki·ªán
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i form, gi·ªØ nguy√™n c√°c gi√° tr·ªã c≈© v√† thay ƒë·ªïi gi√° tr·ªã tr∆∞·ªùng t∆∞∆°ng ·ª©ng
        setForm((prevForm) => ({
            ...prevForm,
            [name]: value,
        }));
    };

    // H√†m x·ª≠ l√Ω khi g·ª≠i bi·ªÉu m·∫´u
    const handleSubmit = (e) => {
        e.preventDefault(); // NgƒÉn h√†nh vi m·∫∑c ƒë·ªãnh c·ªßa bi·ªÉu m·∫´u (t·∫£i l·∫°i trang)

        // Ki·ªÉm tra n·∫øu t√™n ph√≤ng ho·∫∑c m√£ ph√≤ng r·ªóng, hi·ªÉn th·ªã c·∫£nh b√°o
        if (!form.roomName.trim() || !form.roomCode.trim()) {
            alert("T√™n ph√≤ng v√† m√£ ph√≤ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
            return;
        }

        // G·ªçi h√†m onSave ƒë·ªÉ g·ª≠i d·ªØ li·ªáu ƒë√£ ch·ªânh s·ª≠a l√™n component cha
        onSave(form);
    };

    // H√†m x·ª≠ l√Ω quay l·∫°i trang tr∆∞·ªõc
    const handleBack = () => {
        // G·ªçi h√†m onBack n·∫øu ƒë∆∞·ª£c truy·ªÅn qua props
        if (onBack) {
            onBack();
        }
        // S·ª≠ d·ª•ng navigate ƒë·ªÉ quay l·∫°i trang tr∆∞·ªõc ƒë√≥
        navigate(-1);
    };

    // Tr·∫£ v·ªÅ giao di·ªán JSX c·ªßa component
    return (
        // Container ch√≠nh c·ªßa bi·ªÉu m·∫´u v·ªõi class form-container
        <div className="form-container">
            {/* Ti√™u ƒë·ªÅ c·ªßa bi·ªÉu m·∫´u */}
            <h2>‚úèÔ∏è Ch·ªânh S·ª≠a Ph√≤ng Thi</h2>
            {/* Bi·ªÉu m·∫´u v·ªõi s·ª± ki·ªán onSubmit g·ªçi h√†m handleSubmit */}
            <form onSubmit={handleSubmit}>
                {/* Nh√≥m tr∆∞·ªùng nh·∫≠p li·ªáu cho t√™n ph√≤ng */}
                <div className="form-group">
                    <label>T√™n Ph√≤ng:</label>
                    <input
                        type="text" // Ki·ªÉu nh·∫≠p li·ªáu l√† vƒÉn b·∫£n
                        name="roomName" // T√™n tr∆∞·ªùng
                        value={form.roomName} // Gi√° tr·ªã l·∫•y t·ª´ tr·∫°ng th√°i form
                        onChange={handleChange} // S·ª± ki·ªán thay ƒë·ªïi g·ªçi h√†m handleChange
                        required // B·∫Øt bu·ªôc nh·∫≠p
                    />
                </div>

                {/* Nh√≥m tr∆∞·ªùng nh·∫≠p li·ªáu cho m√£ ph√≤ng */}
                <div className="form-group">
                    <label>M√£ Ph√≤ng:</label>
                    <input
                        type="text"
                        name="roomCode"
                        value={form.roomCode}
                        onChange={handleChange}
                        required
                    />
                </div>

                {/* Nh√≥m tr∆∞·ªùng nh·∫≠p li·ªáu cho m√£ ƒë·ªÅ thi (menu th·∫£ xu·ªëng) */}
                <div className="form-group">
                    <label>Ch·ªçn ƒê·ªÅ Thi:</label>
                    <select
                        name="examCode" // T√™n tr∆∞·ªùng
                        value={form.examCode} // Gi√° tr·ªã l·∫•y t·ª´ tr·∫°ng th√°i form
                        onChange={handleChange} // S·ª± ki·ªán thay ƒë·ªïi g·ªçi h√†m handleChange
                        required // B·∫Øt bu·ªôc ch·ªçn
                    >
                        {/* T√πy ch·ªçn m·∫∑c ƒë·ªãnh */}
                        <option value="">-- Ch·ªçn m√£ ƒë·ªÅ thi --</option>
                        {/* L·∫∑p qua m·∫£ng exams ƒë·ªÉ t·∫°o c√°c t√πy ch·ªçn */}
                        {exams.map((exam, idx) => (
                            <option key={idx} value={exam.examCode}>
                                {exam.examCode} - {exam.examName} {/* Hi·ªÉn th·ªã m√£ v√† t√™n ƒë·ªÅ thi */}
                            </option>
                        ))}
                    </select>
                </div>

                {/* Container cho c√°c n√∫t h√†nh ƒë·ªông */}
                <div className="form-actions">
                    {/* N√∫t g·ª≠i bi·ªÉu m·∫´u ƒë·ªÉ l∆∞u thay ƒë·ªïi */}
                    <button type="submit">üíæ L∆∞u Thay ƒê·ªïi</button>
                    {/* N√∫t quay l·∫°i, khi nh·∫•n s·∫Ω g·ªçi h√†m handleBack */}
                    <button type="button" onClick={handleBack}>Quay L·∫°i</button>
                </div>
            </form>
        </div>
    );
};

// Xu·∫•t component EditRoom ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
export default EditRoom;